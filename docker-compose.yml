services:
  traefik:
    image: traefik:3.0
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    ports:
      - 80:80
      - 443:443
    env_file: .env
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
      - ./traefik/acme.json:/acme.json
      - /home/daniel/homeserver-data/traefik/traefik.log:/var/log/traefik.log
      - /home/daniel/homeserver-data/traefik/access.log:/var/log/access.log
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${BASE_DOMAIN}`)"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.${BASE_DOMAIN}`)"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-secure.tls.domains[0].main=${BASE_DOMAIN}"
      - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.${BASE_DOMAIN}"
      - "traefik.http.routers.traefik-secure.service=api@internal"
      - "traefik.http.routers.traefik-secure.middlewares=tinyauth"

  glance:
    extends:
      file: apps/glance/docker-compose.yml
      service: glance
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.glance.rule=Host(`glance.${BASE_DOMAIN}`)"
      - "traefik.http.routers.glance.entrypoints=https"
      - "traefik.http.routers.glance.tls=true"
      - "traefik.http.services.glance.loadbalancer.server.port=8080"
      - "traefik.http.routers.glance.middlewares=tinyauth"
    networks:
      - proxy

  dozzle:
    extends:
      file: apps/dozzle/docker-compose.yml
      service: dozzle
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle.rule=Host(`dozzle.${BASE_DOMAIN}`)"
      - "traefik.http.routers.dozzle.entrypoints=https"
      - "traefik.http.routers.dozzle.tls=true"
      - "traefik.http.services.dozzle.loadbalancer.server.port=8080"
      - "traefik.http.routers.dozzle.middlewares=tinyauth"
    networks:
      - proxy

  start-page:
    extends:
      file: apps/start-page/docker-compose.yml
      service: start-page
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.startPage.rule=Host(`start.${BASE_DOMAIN}`)"
      - "traefik.http.routers.startPage.entrypoints=https"
      - "traefik.http.routers.startPage.tls=true"
      - "traefik.http.services.startPage.loadbalancer.server.port=80"
      - "traefik.http.routers.startPage.middlewares=tinyauth"
    networks:
      - proxy

  tinyauth:
    extends:
      file: apps/tinyauth/docker-compose.yml
      service: tinyauth
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tinyauth.rule=Host(`auth.${BASE_DOMAIN}`)"
      - "traefik.http.routers.tinyauth.entrypoints=https"
      - "traefik.http.routers.tinyauth.tls=true"
      - "traefik.http.middlewares.tinyauth.forwardauth.address=http://tinyauth:3000/api/auth/traefik"
    networks:
      - proxy

  whoami:
    container_name: whoami
    image: traefik/whoami:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.${BASE_DOMAIN}`)"
      - "traefik.http.routers.whoami.entrypoints=https"
      - "traefik.http.routers.whoami.tls=true"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"
      - "traefik.http.routers.whoami.middlewares=tinyauth"
    networks:
      - proxy

  gluetun:
    container_name: gluetun
    extends:
      file: apps/arr-stack/docker-compose.yml
      service: gluetun
    ports:
      - 9117:9117 # Jackett
      - 9091:9091 # Transmission
      - 51413:51413 # Transmission
      - 51413:51413/udp # Transmission
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=Host(`jackett.${BASE_DOMAIN}`)"
      - "traefik.http.routers.jackett.entrypoints=https"
      - "traefik.http.routers.jackett.tls=true"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117"

      - "traefik.http.routers.transmission.rule=Host(`transmission.${BASE_DOMAIN}`)"
      - "traefik.http.routers.transmission.entrypoints=https"
      - "traefik.http.routers.transmission.tls=true"
      - "traefik.http.services.transmission.loadbalancer.server.port=9091"

      - "traefik.http.routers.transmission.service=transmission"
      - "traefik.http.routers.jackett.service=jackett"
    networks:
      - proxy

  jackett:
    image: linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
      - AUTO_UPDATE=true #optional
    volumes:
      - /home/daniel/homeserver-data/arr-stack/jackett/config:/config
      - /home/daniel/homeserver-data/arr-stack/jackett/downloads:/downloads
    restart: unless-stopped
    network_mode: 'service:gluetun'

  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - /user/daniel/homeserver-data/arr-stack/transmission/data:/config
      - /user/daniel/homeserver-data/arr-stack/transmission/downloads/incomplete:/downloads/incomplete
      - /user/daniel/homeserver-data/arr-stack/transmission/downloads/complete:/downloads/complete
      - /user/daniel/homeserver-data/arr-stack/transmission/watch:/watch
    restart: unless-stopped
    network_mode: 'service:gluetun'

  karakeep-web:
    image: ghcr.io/karakeep-app/karakeep:release
    container_name: karakeep
    restart: unless-stopped
    volumes:
      # By default, the data is stored in a docker volume called "data".
      # If you want to mount a custom directory, change the volume mapping to:
      # - /path/to/your/directory:/data
      - /home/daniel/homeserver-data/karakeep:/data
    env_file:
      - /home/daniel/homeserver/apps/karakeep/.env
    environment:
      MEILI_ADDR: http://meilisearch:7700
      BROWSER_WEB_URL: http://chrome:9222
      # OPENAI_API_KEY: ...
      # You almost never want to change the value of the DATA_DIR variable.
      # If you want to mount a custom directory, change the volume mapping above instead.
      DATA_DIR: /data # DON'T CHANGE THIS
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.karakeep.rule=Host(`karakeep.${BASE_DOMAIN}`)"
      - "traefik.http.routers.karakeep.entrypoints=https"
      - "traefik.http.routers.karakeep.tls=true"
      - "traefik.http.services.karakeep.loadbalancer.server.port=3000"
      - "traefik.http.routers.karakeep.middlewares=tinyauth"
    networks:
      - proxy

  chrome:
    container_name: karakeep-chrome
    image: gcr.io/zenika-hub/alpine-chrome:123
    restart: unless-stopped
    command:
      - --no-sandbox
      - --disable-gpu
      - --disable-dev-shm-usage
      - --remote-debugging-address=0.0.0.0
      - --remote-debugging-port=9222
      - --hide-scrollbars
  meilisearch:
    container_name: karakeep-meilisearch
    image: getmeili/meilisearch:v1.13.3
    restart: unless-stopped
    env_file:
      - /home/daniel/homeserver/apps/karakeep/.env
    environment:
      MEILI_NO_ANALYTICS: "true"
    volumes:
      - meilisearch:/meili_data

  local-content-share:
    container_name: local-content-share
    image: tanq16/local-content-share:main
    volumes:
      - /home/daniel/homeserver-data/local-content-share:/app/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.localContentShare.rule=Host(`share.${BASE_DOMAIN}`)"
      - "traefik.http.routers.localContentShare.entrypoints=https"
      - "traefik.http.routers.localContentShare.tls=true"
      - "traefik.http.services.localContentShare.loadbalancer.server.port=8080"
      - "traefik.http.routers.localContentShare.middlewares=tinyauth"
    networks:
      - proxy

  pihole:
    extends:
      file: apps/pihole/docker-compose.yml
      service: pihole
    networks:
      pihole_network:
        ipv4_address: 192.168.178.151

volumes:
  meilisearch:
  data:

networks:
  proxy:
    external: true

  pihole_network:
    driver: macvlan
    driver_opts:
      parent: eth0
    ipam:
      config:
        - subnet: 192.168.178.0/24
          gateway: 192.168.178.1
